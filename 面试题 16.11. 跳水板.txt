你正在使用一堆木板建造跳水板。有两种类型的木板，其中长度较短的木板长度为shorter，长度较长的木板长度为longer。你必须正好使用k块木板。编写一个方法，生成跳水板所有可能的长度。

返回的长度需要从小到大排列。

示例 1

输入：
shorter = 1
longer = 2
k = 3
输出： [3,4,5,6]
解释：
可以使用 3 次 shorter，得到结果 3；使用 2 次 shorter 和 1 次 longer，得到结果 4 。以此类推，得到最终结果。

 

class Solution {
    public int[] divingBoard(int shorter, int longer, int k) {
        if (k == 0) {//当0块时，就没有数据
            return new int[0];
        }
        if (shorter == longer) {//当最长和最短相等时，就只有一种
            int result[] = new int[1];
            result[0] = shorter * k;
            return result;
        }
        int result[] = new int[k + 1];
        //循环把可能的结果往数组里面塞
        for (int i = 0; i <= k; i++) {
            result[i] = (k - i) * shorter + i * longer;
        }

        return result;
    }
}