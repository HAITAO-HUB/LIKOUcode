给定一个非空的整数数组，返回其中出现频率前 k 高的元素。

 
示例 1:

输入: nums = [1,1,1,2,2,3], k = 2
输出: [1,2]
示例 2:

输入: nums = [1], k = 1
输出: [1]

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/top-k-frequent-elements
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

class Solution {
    public int[] topKFrequent(int[] nums, int k) {
        Map<Integer,Integer> map=new HashMap<>();
        for(int i=0;i<nums.length;i++){
            if(!map.containsKey(nums[i])){
                map.put(nums[i],1);
            }
            else{
                map.put(nums[i],map.get(nums[i])+1);
            }
        }

        PriorityQueue<Integer> que=new PriorityQueue<>(new Comparator<Integer>(){
            public int  compare(Integer a,Integer b){
                return map.get(a)-map.get(b);
            }
        });

        for(Integer key:map.keySet()){
            if(que.size()<k){
                que.add(key);
            }else if(map.get(que.peek())<map.get(key)){
                que.remove();
                que.add(key);
            }
        }
        int[] arr=new int[k];
        for(int i=k-1;i>=0;i--){
            arr[i]=que.poll();
        }
        return arr;
    }
}