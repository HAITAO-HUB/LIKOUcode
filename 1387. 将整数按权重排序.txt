此代码不能通过全部测试用例（315 / 333），问题还未解决，只是提供了HashMap排序的思路

我们将整数 x 的 权重 定义为按照下述规则将 x 变成 1 所需要的步数：

如果 x 是偶数，那么 x = x / 2
如果 x 是奇数，那么 x = 3 * x + 1
比方说，x=3 的权重为 7 。因为 3 需要 7 步变成 1 （3 --> 10 --> 5 --> 16 --> 8 --> 4 --> 2 --> 1）。

给你三个整数 lo， hi 和 k 。你的任务是将区间 [lo, hi] 之间的整数按照它们的权重 升序排序 ，如果大于等于 2 个整数有 相同 的权重，那么按照数字自身的数值 升序排序 。

请你返回区间 [lo, hi] 之间的整数按权重排序后的第 k 个数。

注意，题目保证对于任意整数 x （lo <= x <= hi） ，它变成 1 所需要的步数是一个 32 位有符号整数。




import java.util.Arrays;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map.Entry;
import java.util.Map;
import java.util.ArrayList;
import java.util.Arrays;


class Solution {
    public int getKth(int lo, int hi, int k) {
        int n=hi-lo+1;
        int[] arr=new int[n];
        Map<Integer,Integer> map=new HashMap<>();
        for(int i=lo;i<=hi;i++){
            arr[i-lo]=num(i);
            map.put(i,arr[i-lo]);
        }

       List<Map.Entry<Integer,Integer>> list=new ArrayList<Map.Entry<Integer, Integer>>(map.entrySet());
        
        Collections.sort(list,new Comparator<Map.Entry<Integer,Integer>>() {
                //升序排序
                public int compare(Entry<Integer, Integer> o1,
                        Entry<Integer, Integer> o2) {
                    return o1.getValue().compareTo(o2.getValue());
                }
     
            });

        int z=1;
        for(Map.Entry<Integer,Integer> mapping : list){
             if(z!=k){
                 z++;
                 continue;
             }
            return mapping.getKey();
        }
        return 0;
    }
    public static int num(int n){
        int cnt=0;
        while(n!=1){
            if(n%2!=0){
                n=n*3+1;
                cnt++;
            }
            else{
                n/=2;
                cnt++;
            }
        }
        return cnt;
    }
}