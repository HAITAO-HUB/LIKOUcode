给定一个数组 nums，有一个大小为 k 的滑动窗口从数组的最左侧移动到数组的最右侧。你只可以看到在滑动窗口内的 k 个数字。滑动窗口每次只向右移动一位。

返回滑动窗口中的最大值。

示例:

输入: nums = [1,3,-1,-3,5,3,6,7], 和 k = 3
输出: [3,3,5,5,6,7] 
解释: 

  滑动窗口的位置                最大值
---------------               -----
[1  3  -1] -3  5  3  6  7       3
 1 [3  -1  -3] 5  3  6  7       3
 1  3 [-1  -3  5] 3  6  7       5
 1  3  -1 [-3  5  3] 6  7       5
 1  3  -1  -3 [5  3  6] 7       6
 1  3  -1  -3  5 [3  6  7]      7

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/sliding-window-maximum
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
class Solution {
    public int[] maxSlidingWindow(int[] nums, int k) {
        int n=nums.length;
        if(n==0){
            return nums;
        }

        int[] arr=new int[n-k+1];
        Deque<Integer> que=new LinkedList<>();
        //双端队列中保存下标
        for(int i=0;i<n;i++){
            //头:移除头部，保证窗口的长度范围
            if(!que.isEmpty()&&que.getFirst()<(i-k+1)){
                que.removeFirst();
            }
            //尾：移除尾部小于当前值的元素
            while(!que.isEmpty()&&nums[i]>=nums[que.getLast()]){
                que.removeLast();
            }
            //尾：尾部加入
            que.addLast(i);
            //头：从头部返回最大值
            if(i>=k-1){
               arr[i-k+1]=nums[que.getFirst()]; 
            }
        }
        return arr;
    }
}