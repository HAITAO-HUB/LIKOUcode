class MinStack {
    private Stack<Integer> a;//存放数据
    private Stack<Integer> b;//存放最小值
    /** initialize your data structure here. */
    public MinStack() {
        a=new Stack<>();
        b=new Stack<>();
    }
    /*数据栈和辅助栈同步
    public void push(int x) {
        a.push(x);
        if(b.empty()||x<=b.peek()){
            b.push(x);
        }else{
            b.push(b.peek());
        }
    }
    
    public void pop() {
        if (!a.isEmpty()) {
            b.pop();
            a.pop();
        }
    }
    */
	//数据栈和辅助栈不同步
	public void push(int x) {
        a.push(x);
        if(b.empty()||x<=b.peek()){
            b.push(x);
        }
    }
    
    public void pop() {
        if (a.peek().equals(b.peek())){
            b.pop();
        }
        a.pop();
    }
    public int top() {
        if(!a.empty())
        return a.peek();
        throw new RuntimeException("栈中元素为空，此操作非法");
    }
    
    public int getMin() {
    if(!b.empty())
    return b.peek();
    throw new RuntimeException("栈中元素为空，此操作非法");
    }
}
/**
 * Your MinStack object will be instantiated and called as such:
 * MinStack obj = new MinStack();
 * obj.push(x);
 * obj.pop();
 * int param_3 = obj.top();
 * int param_4 = obj.getMin();
 */


java

class MinStack {
    Stack<Integer> s;
    Stack<Integer> mins;
    /** initialize your data structure here. */
    public MinStack() {
       s=new Stack<>();
       mins=new Stack<>();
    }
    
    public void push(int x) {
      
        s.push(x);
        if(mins.size()==0||x<=mins.peek()){
            mins.push(x);
        }
        
    }
    
    public void pop() {
        if(s.peek().equals(mins.peek())){//integer建议使用equals比较，因为Integer缓存范围是-128~127
            mins.pop();
        }
        s.pop();
    }
    
    public int top() {
        return s.peek();
    }
    
    public int getMin() {
        
    return mins.peek();
    }
}

/**
 * Your MinStack object will be instantiated and called as such:
 * MinStack obj = new MinStack();
 * obj.push(x);
 * obj.pop();
 * int param_3 = obj.top();
 * int param_4 = obj.getMin();
 */